# ====== CÀI ĐẶT ======
!pip install xgboost numpy scikit-learn pandas matplotlib seaborn openpyxl

import os
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime
import pytz
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import xgboost as xgb

# ====== CẤU HÌNH OUTPUT ======
tz = pytz.timezone('Asia/Ho_Chi_Minh')
timestamp = datetime.now(tz).strftime("%Y%m%d_%H%M%S")
RESULT_PARENT_DIR = '/content/drive/MyDrive/Tai_Lieu_NCKH/AIData/xgboost_cough'
OUTPUT_DIR = os.path.join(RESULT_PARENT_DIR, timestamp)
os.makedirs(OUTPUT_DIR, exist_ok=True)
print(f"Thư mục lưu kết quả lần train này: {OUTPUT_DIR}")

# ====== ĐỌC DỮ LIỆU MFCC ======
input_dir = "/content/drive/MyDrive/cough_dataset/output_mfcc"
label_names = sorted([d for d in os.listdir(input_dir) if os.path.isdir(os.path.join(input_dir, d))])
label_map = {name: idx for idx, name in enumerate(label_names)}
print("Label mapping:", label_map)

X, y = [], []
for label_name in label_names:
    label_folder = os.path.join(input_dir, label_name)
    for file in os.listdir(label_folder):
        if file.endswith(".npy"):
            data = np.load(os.path.join(label_folder, file))
            X.append(data.flatten())
            y.append(label_map[label_name])

X = np.array(X)
y = np.array(y)
print(f"Dataset shape: {X.shape}, Labels shape: {y.shape}")

# ====== SPLIT DATA ======
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)
print(f"Train size: {X_train.shape[0]}, Test size: {X_test.shape[0]}")

# ====== TRAIN XGBOOST ======
model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
model.fit(X_train, y_train)

# ====== ĐÁNH GIÁ KẾT QUẢ ======
y_pred = model.predict(X_test)
report = classification_report(y_test, y_pred, target_names=label_names, output_dict=True)
cm = confusion_matrix(y_test, y_pred)

# ====== FILE NAMES GẮN TIMESTAMP ======
excel_path = os.path.join(OUTPUT_DIR, f"{timestamp}_xgboost_classification_report.xlsx")
cm_path = os.path.join(OUTPUT_DIR, f"{timestamp}_confusion_matrix.png")
model_path = os.path.join(OUTPUT_DIR, f"{timestamp}_xgboost_model.json")

# ====== LƯU classification report vào Excel ======
df_report = pd.DataFrame(report).transpose()
df_report.to_excel(excel_path)
print(f"Đã lưu classification report vào: {excel_path}")

# ====== LƯU confusion matrix ======
plt.figure(figsize=(8, 8))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", 
            xticklabels=label_names, yticklabels=label_names)
plt.title("Confusion Matrix (XGBoost)")
plt.savefig(cm_path)
plt.close()
print(f"Đã lưu confusion matrix vào: {cm_path}")

# ====== LƯU predict vs true label vào Excel sheet thứ 2 ======
df_test_result = pd.DataFrame({
    'True Label': [label_names[i] for i in y_test],
    'Predicted Label': [label_names[i] for i in y_pred]
})
with pd.ExcelWriter(excel_path, engine='openpyxl', mode='a') as writer:
    df_test_result.to_excel(writer, index=False, sheet_name='Test Results')
print("Đã lưu sheet Test Results vào file Excel.")

# ====== LƯU MÔ HÌNH ======
model.save_model(model_path)
print(f"Đã lưu mô hình XGBoost vào: {model_path}")

# ====== IN TỔNG QUAN ======
print("\n=== TỔNG QUAN KẾT QUẢ XGBOOST ===")
print(f"Accuracy tổng thể: {report['accuracy']*100:.2f}%")
print(pd.DataFrame(report).transpose())
